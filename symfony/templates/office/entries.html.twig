{% extends 'base.html.twig' %}
{% block title %}Officina - Office Rental{% endblock %}
{% block stylesheets %}
    <style>

    </style>
{% endblock %}

{% block body %}
    <div class="container">
        <div class="offices-header">
            <h1 class="office-title">Available nearby Offices</h1>
            <p class="lead office-description"></p>
        </div>
        <div class="row">
        <div id='map' class="col-6">
        </div>
        <div class="col-6">
            <div class="col-md-12 col-lg-12 col-xl-12">
                {% for label, messages in app.flashes %}
                    {% for message in messages %}
                        <div class="alert alert-{{ label }}" role="alert">
                            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                            {{ message }}
                        </div>
                    {% endfor %}
                {% endfor %}
            </div>
            <div class="col-sm-12 office-main">
                <div class="list-group">
                    {% for office in entries %}
                  <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                    <div class="d-flex w-100 justify-content-between">
                      <h5 class="mb-1">{{ office.name }}</h5>
                      <small>Available</small>
                    </div>
                    <p class="mb-1">{{ office.description }}</p>
                    <small>{{ office.location }}</small>
                      {% if app.user is not null and office.user != app.user.id %}
                          <a href="{{ path('order_new', {'id': office.id}) }}" class="btn btn-success">Book</a>
                      {% elseif app.user is null %}
                          <a href="{{ path('order_new', {'id': office.id}) }}" class="btn btn-success">Book</a>
                      {% endif %}
                  </a>
                    {% else %}
                        <div>
                            No offices available
                        </div>

                    {% endfor %}
            </div>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
      <script>

          // This will let you use the .remove() function later on
          if (!('remove' in Element.prototype)) {
              Element.prototype.remove = function() {
                  if (this.parentNode) {
                      this.parentNode.removeChild(this);
                  }
              };
          }

          mapboxgl.accessToken = 'pk.eyJ1Ijoia2FydmV6IiwiYSI6ImNrZGtwdGRsajBxd20zMG50c2t1MzRmNGIifQ.zUkJ4rXmsi-h2a4oLJg-Jw';
          var map = new mapboxgl.Map({
              container: 'map', // Container ID
              style: 'mapbox://styles/mapbox/streets-v11', // Map style to use
              center: [-122.25948, 37.87221], // Starting position [lng, lat]
              zoom: 12, // Starting zoom level
          });
          /*var geocoder = new MapboxGeocoder({ // Initialize the geocoder
              accessToken: mapboxgl.accessToken, // Set the access token
              mapboxgl: mapboxgl, // Set the mapbox-gl instance
              marker: false, // Do not use the default marker style
              placeholder: 'Search for offices', // Placeholder text for the search bar
              //bbox: [-122.30937, 37.84214, -122.23715, 37.89838], // Boundary for Berkeley
              proximity: {
                  longitude: -122.25948,
                  latitude: 37.87221
              } // Coordinates of UC Berkeley
          });*/

          // Add the geocoder to the map
          //map.addControl(geocoder);
          var offices = {{ geojson|json_encode|raw }};
          offices.features.forEach(function(office, i){
              office.properties.id = i;
          });
          console.log(offices);


          /**
           * Add a marker to the map for every store listing.
           **/
          function addMarkers() {
              /* For each feature in the GeoJSON object above: */
              offices.features.forEach(function(marker) {
                  /* Create a div element for the marker. */
                  var el = document.createElement('div');
                  /* Assign a unique `id` to the marker. */
                  el.id = "marker-" + marker.properties.id;
                  /* Assign the `marker` class to each marker for styling. */
                  el.className = 'marker';

                  /**
                   * Create a marker using the div element
                   * defined above and add it to the map.
                   **/
                  new mapboxgl.Marker(el, { offset: [0, -23] })
                      .setLngLat(marker.geometry.coordinates)
                      .addTo(map);

                  /**
                   * Listen to the element and when it is clicked, do three things:
                   * 1. Fly to the point
                   * 2. Close all other popups and display popup for clicked store
                   * 3. Highlight listing in sidebar (and remove highlight for all other listings)
                   **/
                  el.addEventListener('click', function(e){
                      /* Fly to the point */
                      flyToStore(marker);
                      /* Close all other popups and display popup for clicked store */
                      createPopUp(marker);
                      /* Highlight listing in sidebar */
                      var activeItem = document.getElementsByClassName('active');
                      e.stopPropagation();
                      if (activeItem[0]) {
                          activeItem[0].classList.remove('active');
                      }
                      //var listing = document.getElementById('listing-' + marker.properties.id);
                      //listing.classList.add('active');
                  });
              });
          }

          /**
           * Add a listing for each store to the sidebar.
           **/
          function buildLocationList(data) {
              var listings = document.createElement('div');
              data.features.forEach(function(store, i){
                  /**
                   * Create a shortcut for `store.properties`,
                   * which will be used several times below.
                   **/
                  var prop = store.properties;

                  /* Add a new listing section to the sidebar. */
                  var listing = listings.appendChild(document.createElement('div'));
                  /* Assign a unique `id` to the listing. */
                  listing.id = "listing-" + prop.id;
                  /* Assign the `item` class to each listing for styling. */
                  listing.className = 'item';

                  /* Add the link to the individual listing created above. */
                  var link = listing.appendChild(document.createElement('a'));
                  link.href = '#';
                  link.className = 'title';
                  link.id = "link-" + prop.id;
                  link.innerHTML = prop.address;

                  /* Add details to the individual listing. */
                  var details = listing.appendChild(document.createElement('div'));
                  details.innerHTML = prop.city;
                  if (prop.phone) {
                      details.innerHTML += ' Â· ' + prop.phoneFormatted;
                  }

                  /**
                   * Listen to the element and when it is clicked, do four things:
                   * 1. Update the `currentFeature` to the store associated with the clicked link
                   * 2. Fly to the point
                   * 3. Close all other popups and display popup for clicked store
                   * 4. Highlight listing in sidebar (and remove highlight for all other listings)
                   **/
                  link.addEventListener('click', function(e){
                      for (var i=0; i < data.features.length; i++) {
                          if (this.id === "link-" + data.features[i].properties.id) {
                              var clickedListing = data.features[i];
                              flyToStore(clickedListing);
                              createPopUp(clickedListing);
                          }
                      }
                      var activeItem = document.getElementsByClassName('active');
                      if (activeItem[0]) {
                          activeItem[0].classList.remove('active');
                      }
                      this.parentNode.classList.add('active');
                  });

              });
              $('body').append(listings)
          }

          /**
           * Use Mapbox GL JS's `flyTo` to move the camera smoothly
           * a given center point.
           **/
          function flyToStore(currentFeature) {
              map.flyTo({
                  center: currentFeature.geometry.coordinates,
                  zoom: 15
              });
          }

          /**
           * Create a Mapbox GL JS `Popup`.
           **/
          function createPopUp(currentFeature) {
              var popUps = document.getElementsByClassName('mapboxgl-popup');
              if (popUps[0]) popUps[0].remove();
              var popup = new mapboxgl.Popup({closeOnClick: false})
                  .setLngLat(currentFeature.geometry.coordinates)
                  .setHTML('<h3>Sweetgreen</h3>' +
                      '<h4>' + currentFeature.properties.address + '</h4>')
                  .addTo(map);
          }















        // After the map style has loaded on the page,
        // add a source layer and default styling for a single point
        map.on('load', function() {
            map.addSource("places", {
                "type": "geojson",
                "data": offices
            });

            /**
             * Add all the things to the page:
             * - The location listings on the side of the page
             * - The markers onto the map
             */
            buildLocationList(offices);
            addMarkers();
        });

    </script>
{% endblock %}
